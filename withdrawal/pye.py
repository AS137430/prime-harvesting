from decimal import Decimal
from .abc import WithdrawalStrategy
from metrics import pmt

class RetrenchmentRule(WithdrawalStrategy):
    """ Gordon Pye's retrenchment rule is another PMT based solution.

    Pye uses PMT in a slightly different way. He doesn't use it to define
    a schedule of withdrawals. Instead it is a "handbrake". You still
    need to specify an initial withdrawal rate, which is then adjusted
    upwards for inflation every year.

    Only when that exceeds the "retrenchment rule" (i.e. the number
    generated by PMT) do you adjust things. 
    """
    def __init__(self, portfolio, harvest_strategy,
            current_age=65,
            final_age=110,
            discount_rate=.08,
            only_down=True):
        super().__init__(portfolio, harvest_strategy)

        self.discount_rate = discount_rate
        self.final_age = final_age
        self.current_age = current_age
        # Do we only "retrench" or do we also increase the withdrawals?
        # Setting this to true means using PMT directly.
        self.only_down = only_down

        self.current_withdrawal = pmt(self.discount_rate, self.final_age - self.current_age, self.portfolio.value)

        self.retrenchments = []

    def num_retrenchments(self):
        return len(self.retrenchments)

    def _calc(self):
        p_v = pmt(self.discount_rate, self.final_age - self.current_age, self.portfolio.value)
        if p_v < self.current_withdrawal:
            self.retrenchments.append((self.current_age, self.current_withdrawal, p_v))

        if self.only_down:
            if p_v < self.current_withdrawal: self.current_withdrawal = p_v
        else:
            self.current_withdrawal = p_v

        return self.current_withdrawal

    def start(self):
        return self._calc()

    def next(self):
            # Update our internal state.
            self.current_age += 1
            self.current_withdrawal *= 1 + self.current_inflation

            if self.current_age < self.final_age:
                withdrawal = self._calc()
            else:
                # We've reached the end of Pye's PMT calculations...
                # What do we do next?
                withdrawal = Decimal(0)

            return withdrawal
